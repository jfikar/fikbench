#!/bin/bash
source scripts/functions.sh

#export PATH=$(echo "$PATH" | sed 's/:\/usr\/lib\/ccache\/bin//')
#export PATH=/usr/lib/ccache/bin:$PATH
#echo $PATH
TMP2=$(mktemp -d)
echo -n -e "Ccache: \t"

unset LLVM
unset LLVM_IAS

RETURN=$(pwd)
cd downloads/

if [ ! -f ${KERNEL} ] ; then
        wget https://www.kernel.org/pub/linux/kernel/v5.x/${KERNEL}
fi

#echo $PATH
#echo $(which gcc)

cd ${TMP2}
tar xf ${RETURN}/downloads/${KERNEL}
CheckReturnCode

cd $(basename ${KERNEL} .tar.xz)
make -j $JOBS allnoconfig > /dev/null
CheckReturnCode

#clang10 + kernel 5.8 defconfig workaround
#sed -i 's/CONFIG_RETPOLINE=y/# CONFIG_RETPOLINE is not set/g' .config
#sed -i 's/CONFIG_UNWINDER_ORC=y/# CONFIG_UNWINDER_ORC is not set/g' .config
#sed -i 's/# CONFIG_UNWINDER_FRAME_POINTER is not set/CONFIG_UNWINDER_FRAME_POINTER=y/g' .config
#sed -i 's/CONFIG_STACK_VALIDATION=y/# CONFIG_STACK_VALIDATION is not set/g' .config

#allnoconfig selects 32bit kernel on x86, workaround to compile 64bit
sed -i 's/# CONFIG_64BIT is not set/CONFIG_64BIT=y/g' .config
make -j $JOBS olddefconfig  >/dev/null
CheckReturnCode

SwitchTo performance

i=0 ; while [ $i -lt $RUNS ]; do
	#printf "."
	ProgressBar ${i} ${RUNS}
	i=$(($i+1))
	make -j $JOBS clean > /dev/null
	time -p ( KBUILD_BUILD_TIMESTAMP='' make CC="ccache gcc" -j $JOBS  > /dev/null ) 2>> "${TIMING_FILE}"
	CheckReturnCode
done
cd ${RETURN}
rm -rf ${TMP2}
#remove first cold cache result
sed -i '1d' "${TIMING_FILE}"
SwitchTo ondemand
